[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Subhash R. Lele. Author. Jonah L. Keim. Author. Peter Solymos. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lele SR, Keim JL, Solymos P (2023). ResourceSelection: Resource Selection (Probability) Functions Use-Availability Data. R package version 0.3-6, https://github.com/psolymos/ResourceSelection.","code":"@Manual{,   title = {ResourceSelection: Resource Selection (Probability) Functions for Use-Availability Data},   author = {Subhash R. Lele and Jonah L. Keim and Peter Solymos},   year = {2023},   note = {R package version 0.3-6},   url = {https://github.com/psolymos/ResourceSelection}, }"},{"path":"/index.html","id":"resourceselection-resource-selection-probability-functions-for-use-availability-data","dir":"","previous_headings":"","what":"Resource Selection (Probability) Functions for Use-Availability Data","title":"Resource Selection (Probability) Functions for Use-Availability Data","text":"Resource Selection (Probability) Functions use-availability wildlife data based weighted distributions described Lele Keim (2006), Lele (2009), Solymos & Lele (2016).","code":""},{"path":"/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Resource Selection (Probability) Functions for Use-Availability Data","text":"CRAN version: Development version: User visible changes package listed NEWS file.","code":"install.packages(\"ResourceSelection\") devtools::install_github(\"psolymos/ResourceSelection\")"},{"path":"/index.html","id":"report-a-problem","dir":"","previous_headings":"","what":"Report a problem","title":"Resource Selection (Probability) Functions for Use-Availability Data","text":"Use issue tracker report problem.","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Resource Selection (Probability) Functions for Use-Availability Data","text":"","code":"## Some data processing goats$exp.HLI <- exp(goats$HLI) goats$sin.SLOPE <- sin(pi * goats$SLOPE / 180) goats$ELEVATION <- scale(goats$ELEVATION) goats$ET <- scale(goats$ET) goats$TASP <- scale(goats$TASP)  ## Fit two RSPF models: ## global availability (m=0) and bootstrap (B=99) m1 <- rspf(STATUS ~ TASP + sin.SLOPE + ELEVATION, goats, m=0, B = 99) m2 <- rspf(STATUS ~ TASP + ELEVATION, goats, m=0, B = 99)  ## Inspect the summaries summary(m1) # Call: # rspf(formula = STATUS ~ TASP + sin.SLOPE + ELEVATION, data = goats, m = 0, #     B = 99) # # Resource Selection Probability Function (Logistic RSPF) model # Non-matched Used-Available design # Maximum Likelihood estimates # with Nonparametric Bootstrap standard errors (B = 99) # # Fitted probabilities: #      Min.   1st Qu.    Median      Mean   3rd Qu.      Max. # 1.947e-08 4.280e-07 9.977e-07 1.376e-06 1.924e-06 8.793e-06 # # Coefficients (logit link): #              Estimate Std. Error z value Pr(>|z|) # (Intercept) -16.89454    0.26284 -64.276   <2e-16 *** # TASP          0.39116    0.01396  28.011   <2e-16 *** # sin.SLOPE     5.36640    0.09740  55.098   <2e-16 *** # ELEVATION     0.09829    0.01165   8.439   <2e-16 *** # --- # Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # # Log-likelihood: -5.729e+04 # BIC = 1.146e+05 # # Hosmer and Lemeshow goodness of fit (GOF) test: # X-squared = 152.4, df = 8, p-value < 2.2e-16  summary(m2) # Call: # rspf(formula = STATUS ~ TASP + ELEVATION, data = goats, m = 0, B = 99) # # Resource Selection Probability Function (Logistic RSPF) model # Non-matched Used-Available design # Maximum Likelihood estimates # with Nonparametric Bootstrap standard errors (B = 99) # # Fitted probabilities: #    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. # 0.01194 0.58010 0.86180 0.73660 0.95710 0.99830 # # Coefficients (logit link): #             Estimate Std. Error z value Pr(>|z|) # (Intercept)  1.62906    0.10110   16.11   <2e-16 *** # TASP         1.86071    0.07751   24.01   <2e-16 *** # ELEVATION    1.14338    0.08315   13.75   <2e-16 *** # --- # Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # # Log-likelihood: -5.91e+04 # BIC = 1.182e+05 # # Hosmer and Lemeshow goodness of fit (GOF) test: # X-squared = 174.3, df = 8, p-value < 2.2e-16  ## Compare models: looks like m1 is better supported CAIC(m1, m2) #    df     CAIC # m1  4 114591.7 # m2  3 118225.2  ## Visualize the relationships plot(m1) mep(m1) # marginal effects similar to plot but with CIs kdepairs(m1) # 2D kernel density estimates plot(m2) kdepairs(m2) mep(m2)"},{"path":[]},{"path":[]},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Resource Selection (Probability) Functions for Use-Availability Data","text":"Lele, S.R. (2009) new method estimation resource selection probability function. Journal Wildlife Management 73, 122–127. [link] Lele, S. R. & Keim, J. L. (2006) Weighted distributions estimation resource selection probability functions. Ecology 87, 3021–3028. [link] Solymos, P. & Lele, S. R. (2016) Revisiting resource selection probability functions single-visit methods: clarification extensions. Methods Ecology Evolution 7, 196–205. [link, preprint]","code":""},{"path":"/reference/CAIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Consistent AIC — CAIC","title":"Consistent AIC — CAIC","text":"Consistent AIC","code":""},{"path":"/reference/CAIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Consistent AIC — CAIC","text":"","code":"CAIC(object, ..., alpha) # S3 method for default CAIC(object, ..., alpha) CAICtable(object, ..., alpha)"},{"path":"/reference/CAIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Consistent AIC — CAIC","text":"object fitted model object. ... fitted model objects. alpha Weight factor 0 1 (see Details). Default value 0.5.","code":""},{"path":"/reference/CAIC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Consistent AIC — CAIC","text":"CAIC = alpha * AIC + (1 - alpha) * BIC","code":""},{"path":"/reference/CAIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Consistent AIC — CAIC","text":"Atomic vector one input object provided, data frame similar returned AIC BIC one input objects. CAICtable returns data frame delta CAIC (dCAIC = CAIC - min(CAIC)) CAIC weights (wCAIC = exp(-0.5 dCAIC_i) / sum(exp(-0.5 dCAIC_i))) = 1,...,m candidate models.","code":""},{"path":"/reference/CAIC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Consistent AIC — CAIC","text":"Bozdogan, H. 1987. Model selection Akaike's information criterion (AIC): general theory analytical extensions. Psychometrika, 52, 345-370. Taper, M. 2004. Model identification many candidates. : Taper, M. Lele, S. R. (eds), Nature Scientific Evidence: Statistical, Philosophical, Empirical Considerations. University Chicago Press, Chicago, IL, 567 pp.","code":""},{"path":"/reference/CAIC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Consistent AIC — CAIC","text":"Subhash Lele Peter Solymos","code":""},{"path":[]},{"path":"/reference/CAIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Consistent AIC — CAIC","text":"","code":"## compare some random models y <- rnorm(10) a <- lm(y ~ runif(10)) b <- lm(y ~ runif(10))  0.5*(AIC(a) + BIC(a)) #> [1] 35.97645 CAIC(a) #> [1] 35.97645 AIC(a) #> [1] 35.52257 CAIC(a, alpha=1) #> [1] 35.52257 BIC(a) #> [1] 36.43033 CAIC(a, alpha=0) #> [1] 36.43033  CAIC(a, b) #>   df     CAIC #> a  3 35.97645 #> b  3 36.92199 CAIC(a, b, alpha=0.2) #>   df     CAIC #> a  3 36.24877 #> b  3 37.19431  CAICtable(a, b, alpha=1) #>   df     CAIC     dCAIC    wCAIC #> a  3 35.52257 0.0000000 0.616039 #> b  3 36.46811 0.9455388 0.383961  ## you can use global option ## useful when inside of xv or bootstrap ## no need for extra argument getOption(\"CAIC_alpha\") #> NULL op <- options(CAIC_alpha = 0.2) getOption(\"CAIC_alpha\") #> [1] 0.2 CAIC(a,b) #>   df     CAIC #> a  3 36.24877 #> b  3 37.19431 options(op) getOption(\"CAIC_alpha\") #> NULL"},{"path":"/reference/ResourceSelection-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Resource Selection (Probability) Functions for Use-Availability Data — ResourceSelection-package","title":"Resource Selection (Probability) Functions for Use-Availability Data — ResourceSelection-package","text":"Resource Selection (Probability) Functions use-availability wildlife data based weighted distributions described Lele Keim (2006), Lele (2009), Solymos & Lele (2016).","code":""},{"path":"/reference/ResourceSelection-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resource Selection (Probability) Functions for Use-Availability Data — ResourceSelection-package","text":"rsf: Resource Selection Functions (RSF) rspf: Resource Selection Probability Functions (RSPF) hoslem.test: Hosmer-Lemeshow Goodness Fit (GOF) Test Visual summaries: kdepairs 2D scatterplots mep marginal effect plots based fitted model objects.","code":""},{"path":"/reference/ResourceSelection-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Resource Selection (Probability) Functions for Use-Availability Data — ResourceSelection-package","text":"Subhash R. Lele, Jonah L. Keim, Peter Solymos Maintainer: Peter Solymos <solymos@ualberta.ca>","code":""},{"path":"/reference/ResourceSelection-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Resource Selection (Probability) Functions for Use-Availability Data — ResourceSelection-package","text":"Lele, S.R. (2009) new method estimation resource selection probability function. Journal Wildlife Management 73, 122--127. <doi:10.2193/2007-535> Lele, S. R. &  Keim, J. L. (2006) Weighted distributions estimation resource selection probability function. Ecology 87, 3021--3028. <doi:10.1890/0012-9658(2006)87 Solymos, P. & Lele, S. R. (2016) Revisiting resource selection probability functions single-visit methods: clarification extensions. Methods Ecology Evolution 7, 196--205. <doi:10.1111/2041-210X.12432>","code":""},{"path":[]},{"path":"/reference/goats.html","id":null,"dir":"Reference","previous_headings":"","what":"Mountain Goats Data Set — goats","title":"Mountain Goats Data Set — goats","text":"GPS collar data mountain goats (Oreamnos americanus) Lele Keim (2006).","code":""},{"path":"/reference/goats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mountain Goats Data Set — goats","text":"","code":"data(goats)"},{"path":"/reference/goats.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mountain Goats Data Set — goats","text":"data frame 19014 observations following 8 variables. STATUS numeric vector, 1: used, 0: available ID numeric vector, individuals ELEVATION numeric vector (m) SLOPE numeric vector (degrees, steep) ET numeric vector, access escape terrain (distance steep slopes, m) ASPECT numeric vector (degrees) HLI numeric vector, heat load index (0-1) TASP numeric vector, transformed aspect","code":""},{"path":"/reference/goats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mountain Goats Data Set — goats","text":"Mountain goat telemetry data collected Coast Mountains northwest British Columbia, Canada, described Lele Keim (2006).","code":""},{"path":"/reference/goats.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mountain Goats Data Set — goats","text":"Ecological Archives E087-181-S1, http://www.esapubs.org/archive/ecol/E087/181/","code":""},{"path":"/reference/goats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mountain Goats Data Set — goats","text":"Lele, S. R. &  Keim, J. L. (2006)  Weighted distributions estimation resource selection probability functions.  Ecology 87, 3021--3028.","code":""},{"path":"/reference/goats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mountain Goats Data Set — goats","text":"","code":"data(goats) str(goats) #> 'data.frame':\t19014 obs. of  8 variables: #>  $ STATUS   : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ ID       : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ ELEVATION: int  651 660 316 334 454 343 429 493 400 442 ... #>  $ SLOPE    : num  38.5 39.7 20.5 34.1 41.6 ... #>  $ ET       : num  35.4 70.7 50 35.4 25 ... #>  $ ASPECT   : num  243 270 279 266 258 ... #>  $ HLI      : num  0.918 0.884 0.713 0.864 0.935 ... #>  $ TASP     : num  0.947 0.699 0.575 0.745 0.829 ... summary(goats) #>      STATUS             ID           ELEVATION        SLOPE       #>  Min.   :0.0000   Min.   : 1.000   Min.   : 248   Min.   : 0.00   #>  1st Qu.:0.0000   1st Qu.: 3.000   1st Qu.: 685   1st Qu.:25.41   #>  Median :0.0000   Median : 6.000   Median : 985   Median :34.18   #>  Mean   :0.3333   Mean   : 5.785   Mean   :1000   Mean   :33.65   #>  3rd Qu.:1.0000   3rd Qu.: 8.000   3rd Qu.:1322   3rd Qu.:42.68   #>  Max.   :1.0000   Max.   :10.000   Max.   :1966   Max.   :70.80   #>        ET            ASPECT           HLI               TASP          #>  Min.   :  0.0   Min.   : -1.0   Min.   :0.07749   Min.   :-1.00000   #>  1st Qu.: 25.0   1st Qu.:139.5   1st Qu.:0.53882   1st Qu.:-0.04676   #>  Median : 75.0   Median :178.2   Median :0.73698   Median : 0.53151   #>  Mean   :126.8   Mean   :180.7   Mean   :0.68497   Mean   : 0.33343   #>  3rd Qu.:180.3   3rd Qu.:229.6   3rd Qu.:0.86565   3rd Qu.: 0.86441   #>  Max.   :995.3   Max.   :359.6   Max.   :0.98321   Max.   : 1.00000    if (FALSE) { goats$exp.HLI <- exp(goats$HLI) goats$sin.SLOPE <- sin(pi * goats$SLOPE / 180) goats$ELEVATION <- scale(goats$ELEVATION) goats$ET <- scale(goats$ET) goats$TASP <- scale(goats$TASP) m1 <- rspf(STATUS ~ TASP + sin.SLOPE + ELEVATION, goats, m=0, B = 99) m2 <- rspf(STATUS ~ TASP + ELEVATION, goats, m=0, B = 99) summary(m1) summary(m2) AIC(m1, m2) plot(m1) }"},{"path":"/reference/hoslem.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Hosmer-Lemeshow Goodness of Fit (GOF) Test — hoslem.test","title":"Hosmer-Lemeshow Goodness of Fit (GOF) Test — hoslem.test","text":"Hosmer-Lemeshow Goodness Fit (GOF) Test.","code":""},{"path":"/reference/hoslem.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hosmer-Lemeshow Goodness of Fit (GOF) Test — hoslem.test","text":"","code":"hoslem.test(x, y, g = 10)"},{"path":"/reference/hoslem.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hosmer-Lemeshow Goodness of Fit (GOF) Test — hoslem.test","text":"x numeric vector observations, binary (0/1). y expected values. g number bins use calculate quantiles. Needs least 2. degrees freedom test g-2 number bins might also depend data (.e. due identical quantile values lead empty bins). case number bins  equal g, degrees freedom depend number bins less g. case warning produced.","code":""},{"path":"/reference/hoslem.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hosmer-Lemeshow Goodness of Fit (GOF) Test — hoslem.test","text":"Hosmer-Lemeshow test statistical test goodness fit  logistic regression models.","code":""},{"path":"/reference/hoslem.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hosmer-Lemeshow Goodness of Fit (GOF) Test — hoslem.test","text":"list class \"htest\" containing following components: statistic value chi-squared test statistic,     (sum((observed - expected)^2 / expected)). parameter degrees freedom approximate      chi-squared distribution test statistic (g - 2). p.value p-value test. method character string indicating type test performed. data.name character string giving name(s) data. observed observed frequencies g--2      contingency table. expected expected frequencies g--2      contingency table.","code":""},{"path":"/reference/hoslem.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hosmer-Lemeshow Goodness of Fit (GOF) Test — hoslem.test","text":"Hosmer D W, Lemeshow S 2000.  Applied Logistic Regression.  New York, USA: John Wiley Sons.","code":""},{"path":"/reference/hoslem.test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hosmer-Lemeshow Goodness of Fit (GOF) Test — hoslem.test","text":"Peter Solymos adapting code pieces R help mailing list","code":""},{"path":"/reference/hoslem.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hosmer-Lemeshow Goodness of Fit (GOF) Test — hoslem.test","text":"","code":"set.seed(123) n <- 500 x <- rnorm(n) y <- rbinom(n, 1, plogis(0.1 + 0.5*x)) m <- glm(y ~ x, family=binomial) hoslem.test(m$y, fitted(m)) #>  #> \tHosmer and Lemeshow goodness of fit (GOF) test #>  #> data:  m$y, fitted(m) #> X-squared = 4.5227, df = 8, p-value = 0.8072 #>"},{"path":"/reference/kdepairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatterplot Matrix with 2D Kernel Density — kdepairs","title":"Scatterplot Matrix with 2D Kernel Density — kdepairs","text":"Scatterplot matrix 2D kernel density.","code":""},{"path":"/reference/kdepairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatterplot Matrix with 2D Kernel Density — kdepairs","text":"","code":"kdepairs(x, ...)  # S3 method for default kdepairs(x, n=25, density=TRUE, contour=TRUE, ...)  # S3 method for rsf kdepairs(x, n=25, density=TRUE, contour=TRUE, ...)"},{"path":"/reference/kdepairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatterplot Matrix with 2D Kernel Density — kdepairs","text":"x matrix data frame (fitted model object class \"rsf\" \"rspf\"). n number bins used kernel density estimation. density logical, shades corresponding densities plotted. contour logical, contour top shades plotted. ... possible arguments passed pairs.","code":""},{"path":"/reference/kdepairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatterplot Matrix with 2D Kernel Density — kdepairs","text":"Produces scatterplot matrix histograms diagonal, 2D kernel  density estimates contours lower half bivariate scatterplots lowess smooth curves Pearson correlation values  upper half side effect. Returns NULL invisibly.","code":""},{"path":"/reference/kdepairs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scatterplot Matrix with 2D Kernel Density — kdepairs","text":"Peter Solymos","code":""},{"path":[]},{"path":"/reference/kdepairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatterplot Matrix with 2D Kernel Density — kdepairs","text":"","code":"kdepairs(iris[1:4]) #> Warning: argument 1 does not name a graphical parameter #> Warning: argument 1 does not name a graphical parameter #> Warning: argument 1 does not name a graphical parameter #> Warning: argument 1 does not name a graphical parameter"},{"path":"/reference/makeUsedAvail.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Used-Available Data Frame — makeUsedAvail","title":"Make a Used-Available Data Frame — makeUsedAvail","text":"Make used-available data frame presence-absence type data.","code":""},{"path":"/reference/makeUsedAvail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Used-Available Data Frame — makeUsedAvail","text":"","code":"makeUsedAvail(x, ...)  # S3 method for default makeUsedAvail(x, y, ...)  # S3 method for formula makeUsedAvail(formula, data = parent.frame(), ...)"},{"path":"/reference/makeUsedAvail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Used-Available Data Frame — makeUsedAvail","text":"x matrix data frame. y vector 0/1 entries, 1s taken used observations. formula two sided model formula form y ~ x. data data. ... arguments.","code":""},{"path":"/reference/makeUsedAvail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Used-Available Data Frame — makeUsedAvail","text":"function returns data frame, used available portions input data bound top , first column refers y, used (1) available (0) locations indicated different input values. locations input data treated available (0), nonzero observations y treated used (1).","code":""},{"path":"/reference/makeUsedAvail.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a Used-Available Data Frame — makeUsedAvail","text":"Peter Solymos","code":""},{"path":"/reference/makeUsedAvail.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a Used-Available Data Frame — makeUsedAvail","text":"","code":"(x <- data.frame(species=rep(1:0,each=4), var1=1:8, var2=11:18)) #>   species var1 var2 #> 1       1    1   11 #> 2       1    2   12 #> 3       1    3   13 #> 4       1    4   14 #> 5       0    5   15 #> 6       0    6   16 #> 7       0    7   17 #> 8       0    8   18 makeUsedAvail(species ~ var1 + var2, x) #>    species var1 var2 #> 1        1    1   11 #> 2        1    2   12 #> 3        1    3   13 #> 4        1    4   14 #> 5        0    1   11 #> 6        0    2   12 #> 7        0    3   13 #> 8        0    4   14 #> 9        0    5   15 #> 10       0    6   16 #> 11       0    7   17 #> 12       0    8   18"},{"path":"/reference/mep.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal Effect Plots — mep","title":"Marginal Effect Plots — mep","text":"Scatterplot marginal effects based fitted model objects.","code":""},{"path":"/reference/mep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Effect Plots — mep","text":"","code":"mep(object, ...)  # S3 method for default mep(object, which=NULL, link=NULL,     level=0.95, unique=10, n=25, minbucket=5, digits=4,     col.points, col.lines=c(2, 2), pch=19, lty=c(1, 2), lwd=c(2,2),     ask, subset=NULL, ylab, ...)"},{"path":"/reference/mep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Effect Plots — mep","text":"object fitted model object. numeric, logical, character. Indices variables model frame one subset desired. link character accepted make.link, optional argument determine scaling. guessed value determined based family(object)$link (see Details). level numeric [0, 1], confidence level required. unique, digits numeric, number unique points bins used. number unique values less equal number, unique values used without binning. Unique values subject rounding digits. n, minbucket number bins (n) used quantile estimation variable treated unique points. minbucket minimum number points within bin. n decreased minbucket condition satisfied. col.points, pch color type points plotted. col.lines, lty, lwd color, type, width quantile lines plotted. 1st value correspond median, 2nd value upper lower quantiles, respectively. ask logical. TRUE, user asked plot, see par(ask=.). subset optional vector specifying subset data used plotting. ylab character expression, optional y axis label. ... possible arguments passed graphical functions.","code":""},{"path":"/reference/mep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Marginal Effect Plots — mep","text":"input object must fitted model.frame method, possibly well identifiable family/link component (family(object)$link). absence family/link information, range fitted value used guess scaling (identity, log, logit) unless directly supplied via link argument. Fitted values (f(x) = f(x_1,...,x_i,...,x_p); = 1,...,p) plotted x_i. visual display determined type x_i (un-ordered factor, ordered factor, unique numeric values, binned numeric values). unique vale bin, median confidence intervals (quantiles corresponding level) f(x) calculated. Binned values smoothed lowess unless n < 3. Jitter added factor unique value types. Jitter calculated based kernel density. model frame includes response variable well. Plotting f(x) function observations might useful visualization indicate goodness fit lack .","code":""},{"path":"/reference/mep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Marginal Effect Plots — mep","text":"produces one several marginal plots side effect. Returns list quantiles fitted values corresponding binned/unique values variables input object.","code":""},{"path":"/reference/mep.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Marginal Effect Plots — mep","text":"Avgar, T., Lele, S. R., Keim, J. L. & Boyce, M. S. (2017) Relative Selection Strength: Quantifying effect size habitat- step-selection inference. Ecology Evolution 7, 5322--5330.","code":""},{"path":"/reference/mep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Marginal Effect Plots — mep","text":"Peter Solymos Subhash Lele","code":""},{"path":[]},{"path":"/reference/mep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marginal Effect Plots — mep","text":"","code":"data(goats) goats$ELEVATION <- goats$ELEVATION/1000 goats$TASPc <- cut(goats$TASP, 3, ordered_result=FALSE) goats$SLOPEc <- cut(goats$SLOPE, 3, ordered_result=TRUE)  fit <- rspf(STATUS ~ TASPc + SLOPEc + ELEVATION + I(ELEVATION^2), goats, m=0, B=0)  op <- par(mfrow=c(2,2)) mep(fit, which=1:4)#, subset=sample.int(nrow(goats), 10^4))  par(op)"},{"path":"/reference/rsf.html","id":null,"dir":"Reference","previous_headings":"","what":"Resource Selection (Probability) Functions for Use-Availability Data — rsf","title":"Resource Selection (Probability) Functions for Use-Availability Data — rsf","text":"Resource Selection (Probability) Functions   use-availability wildlife data described   Lele Keim (2006) Lele (2009).","code":""},{"path":"/reference/rsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resource Selection (Probability) Functions for Use-Availability Data — rsf","text":"","code":"rsf(formula, data, m, B = 99, inits, method = \"Nelder-Mead\", control, model = TRUE, x = FALSE, ...)  rspf(formula, data, m, B = 99, link = \"logit\", inits, method = \"Nelder-Mead\", control, model = TRUE, x = FALSE, ...)  rsf.fit(X, Y, m, link = \"logit\", B = 99, inits, method = \"Nelder-Mead\", control, ...)  rsf.null(Y, m, inits, ...)"},{"path":"/reference/rsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resource Selection (Probability) Functions for Use-Availability Data — rsf","text":"formula two sided model formula form y ~ x, y vector observations, x set covariates. m argument describing matching use available points, see Details. data data. B number bootstrap iterations make. link character, type link function used. inits initial values, optional. method method used optim numerical optimization. control control options optim. model logical value indicating whether model frame included component returned value x logical values indicating whether model matrix used fitting process returned components returned value. Y vector observations. X covariate matrix. ... arguments passed functions.","code":""},{"path":"/reference/rsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resource Selection (Probability) Functions for Use-Availability Data — rsf","text":"rsf function fits Exponential Resource Selection Function (RSF) model presence data. rspf function fits Resource Selection Probability Function (RSPF) model presence data Link function \"logit\", \"cloglog\", \"probit\" can specified via link argument. rsf.fit workhorse behind two functions. link=\"log\" leads Exponential RSF. rsf.null function fits 'selection' version Exponential Resource Selection Function (RSF) model presence data. LHS formula data must binary, ones indicating used locations, zeros indicating available location. available points used use points m=0 (global availability). m single value, e.g. m=5, assumed available data points grouped batches 5, e.g. IDs c(1,2) used point locations c(1, 1, 1, 1, 1, 2, 2, 2, 2, 2) available locations (local availability, matched use-available design). Similarly, vector matching IDs can also provided, e.g. c(1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2) combining two. potentially allow unbalanced matching (e.g. c(1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2)) easier subsetting data, comes increased computing time. Note, response LHS formula coded c(1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) examples. m defined mapping vector value 0, order course matter. However, ordering matters m constant implies certain structure. model description estimation details, see Lele Keim (2006), Lele (2009), Solymos Lele (2016).","code":""},{"path":"/reference/rsf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resource Selection (Probability) Functions for Use-Availability Data — rsf","text":"list class \"rsf\", \"rsf.null\", \"rspf\" containing following components: call matched call. y vector LHS formula. coefficients named vector coefficients. std.error named vector standard errors     coefficients. loglik maximized pseudo log-likelihood according Lele 2009. results optim results. link character, value link function used. control control parameters optim. inits initial values used optimization. m value m argument possibly matched     use-available design. np number active parameters. fitted.values vector fitted values. relative     selection values RSF models, probability selection     RSPF models. nobs number used locations. bootstrap component store bootstrap results B>0. converged logical, indicating convergence optimization. formula formula supplied. terms terms object used. levels record levels factors used fitting. contrasts contrasts used. model requested, model frame. x requested, model matrix.","code":""},{"path":"/reference/rsf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Resource Selection (Probability) Functions for Use-Availability Data — rsf","text":"Lele, S.R. (2009) new method estimation resource selection probability function. Journal Wildlife Management 73, 122--127. Lele, S. R. &  Keim, J. L. (2006) Weighted distributions estimation resource selection probability functions. Ecology 87, 3021--3028. Solymos, P. & Lele, S. R. (2016) Revisiting resource selection probability functions single-visit methods: clarification extensions. Methods Ecology Evolution 7, 196--205.","code":""},{"path":"/reference/rsf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Resource Selection (Probability) Functions for Use-Availability Data — rsf","text":"Subhash R. Lele, Jonah L. Keim, Peter Solymos","code":""},{"path":"/reference/rsf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resource Selection (Probability) Functions for Use-Availability Data — rsf","text":"","code":"## --- Simulated data example ---  ## settings n.used <- 1000 m <- 10 n <- n.used * m set.seed(1234) x <- data.frame(x1=rnorm(n), x2=runif(n)) cfs <- c(1.5,-1,0.5) ## fitting Exponential RSF model dat1 <- simulateUsedAvail(x, cfs, n.used, m, link=\"log\") m1 <- rsf(status ~ .-status, dat1, m=0, B=0) summary(m1) #>  #> Call: #> rsf(formula = status ~ . - status, data = dat1, m = 0, B = 0) #>  #> Resource Selection Function (Exponential RSF) model #> Non-matched Used-Available design #> Maximum Likelihood estimates #>  #> Fitted values: #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #>  0.03444  0.67639  1.34572  2.34955  2.75012 40.08155  #>  #> Coefficients (log link): #>    Estimate Std. Error z value Pr(>|z|) #> x1  -1.0036         NA      NA       NA #> x2   0.4506         NA      NA       NA #>  #> Log-likelihood: -8714  #> BIC = 1.744e+04  #>  #> Hosmer and Lemeshow goodness of fit (GOF) test: #> X-squared = 6.293, df = 8, p-value 0.6145 #>  ## fitting Logistic RSPF model dat2 <- simulateUsedAvail(x, cfs, n.used, m, link=\"logit\") m2 <- rspf(status ~ .-status, dat2, m=0, B=0) summary(m2) #>  #> Call: #> rspf(formula = status ~ . - status, data = dat2, m = 0, B = 0) #>  #> Resource Selection Probability Function (Logistic RSPF) model #> Non-matched Used-Available design #> Maximum Likelihood estimates #>  #> Fitted probabilities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.1158  0.8306  0.9151  0.8712  0.9604  0.9986  #>  #> Coefficients (logit link): #>             Estimate Std. Error z value Pr(>|z|)   #> (Intercept)   1.7294     0.8221   2.104   0.0354 * #> x1           -1.1667     0.5352  -2.180   0.0293 * #> x2            1.2669     1.0942   1.158   0.2469   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  #>  #> Log-likelihood: -9197  #> BIC = 1.841e+04  #>  #> Hosmer and Lemeshow goodness of fit (GOF) test: #> X-squared = 4.256, df = 8, p-value 0.8334 #>   ## --- Real data analysis from Lele & Keim 2006 ---  if (FALSE) { goats$exp.HLI <- exp(goats$HLI) goats$sin.SLOPE <- sin(pi * goats$SLOPE / 180) goats$ELEVATION <- scale(goats$ELEVATION) goats$ET <- scale(goats$ET) goats$TASP <- scale(goats$TASP)  ## Fit two RSPF models: ## global availability (m=0) and bootstrap (B=99) m1 <- rspf(STATUS ~ TASP + sin.SLOPE + ELEVATION, goats, m=0, B = 99) m2 <- rspf(STATUS ~ TASP + ELEVATION, goats, m=0, B = 99)  ## Inspect the summaries summary(m1) summary(m2)  ## Compare models: looks like m1 is better supported CAIC(m1, m2)  ## Visualize the relationships plot(m1) mep(m1) # marginal effects similar to plot but with CIs kdepairs(m1) # 2D kernel density estimates plot(m2) kdepairs(m2) mep(m2)  ## fit and compare to null RSF model (not available for RSPF) m3 <- rsf(STATUS ~ TASP + ELEVATION, goats, m=0, B = 0) m4 <- rsf.null(Y=goats$STATUS, m=0) CAIC(m3, m4) }"},{"path":"/reference/simulateUsedAvail.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Used-Available Data — simulateUsedAvail","title":"Simulate Used-Available Data — simulateUsedAvail","text":"Simulates used-available data.","code":""},{"path":"/reference/simulateUsedAvail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Used-Available Data — simulateUsedAvail","text":"","code":"simulateUsedAvail(data, parms, n.used, m, link=\"logit\")"},{"path":"/reference/simulateUsedAvail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Used-Available Data — simulateUsedAvail","text":"data matrix data frame. parms coefficients corresponding columns design matrix derived model.matrix(~., data). n.used, m number used points (n.used) number available points (m). link character, type link function used.","code":""},{"path":"/reference/simulateUsedAvail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Used-Available Data — simulateUsedAvail","text":"used-available data frame.","code":""},{"path":"/reference/simulateUsedAvail.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Used-Available Data — simulateUsedAvail","text":"Subhash Lele, Peter Solymos","code":""},{"path":"/reference/simulateUsedAvail.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Used-Available Data — simulateUsedAvail","text":"","code":"n.used <- 1000 m <- 10 n <- n.used * m set.seed(1234) x <- data.frame(x1=rnorm(n), x2=runif(n)) cfs <- c(1.5,-1,0.5) dat1 <- simulateUsedAvail(x, cfs, n.used, m, link=\"log\") str(dat1) #> 'data.frame':\t11000 obs. of  3 variables: #>  $ status: num  1 1 1 1 1 1 1 1 1 1 ... #>  $ x1    : num  -0.19 -2.023 0.422 -0.982 -0.569 ... #>  $ x2    : num  0.995 0.542 0.849 0.521 0.531 ... dat2 <- simulateUsedAvail(x, cfs, n.used, m, link=\"logit\") str(dat2) #> 'data.frame':\t11000 obs. of  3 variables: #>  $ status: num  1 1 1 1 1 1 1 1 1 1 ... #>  $ x1    : num  0.1955 0.3459 -0.0139 -0.2431 -0.9787 ... #>  $ x2    : num  0.0527 0.4838 0.553 0.2334 0.9344 ..."},{"path":"/reference/sindex.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted relative suitability index — sindex","title":"Weighted relative suitability index — sindex","text":"Calculates weighted relative suitability index.","code":""},{"path":"/reference/sindex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted relative suitability index — sindex","text":"","code":"sindex(y, x) wrsi(y, x)"},{"path":"/reference/sindex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted relative suitability index — sindex","text":"y matrix observations sindex, vector observations wrsi. x matrix proportions (.e. values 0 1 consistent meaning across columns, often unit sum constraint).","code":""},{"path":"/reference/sindex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted relative suitability index — sindex","text":"wrsi returns data frame (class 'wrsi') following columns: WRSI weighted relative suitability index, range (0- Inf). zWRSI log WRSI (z-transformed), range (-Inf, Inf). rWRSI inverse Fisher z-transformed zWRSI, range (-1, 1). Pused Pavail total proportion used (y > 0) available feature (column) x. Pw weighted proportions y. u used available totals feature (column) x. sindex returns data frame (class 'sindex') one column species, one row feature (column) x. Cell values inverse Fisher z-transformed (zWRSI) indices.","code":""},{"path":"/reference/sindex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Weighted relative suitability index — sindex","text":"Peter Solymos <solymos@ualberta.ca>","code":""},{"path":"/reference/sindex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted relative suitability index — sindex","text":"","code":"## --- habitat composition matrix set.seed(1234) n <- 1000 # sample size k <- 5 # habitat classes s <- runif(n, 1, 5) p <- plogis(rnorm(n*k, 0, rep(s, k))) p <- p*t(replicate(n, sample(c(10,4,2,1,1)))) x <- p / rowSums(p) summary(x) #>        V1                  V2                  V3            #>  Min.   :0.0000013   Min.   :0.0000009   Min.   :0.0000017   #>  1st Qu.:0.0389388   1st Qu.:0.0470597   1st Qu.:0.0400545   #>  Median :0.1058491   Median :0.1140524   Median :0.1130047   #>  Mean   :0.2071808   Mean   :0.2031796   Mean   :0.2041691   #>  3rd Qu.:0.2937164   3rd Qu.:0.2778203   3rd Qu.:0.2833783   #>  Max.   :0.9196112   Max.   :0.9667043   Max.   :0.9443230   #>        V4                  V5            #>  Min.   :0.0000003   Min.   :0.0000017   #>  1st Qu.:0.0383821   1st Qu.:0.0351978   #>  Median :0.0945018   Median :0.0974075   #>  Mean   :0.1863882   Mean   :0.1990821   #>  3rd Qu.:0.2398223   3rd Qu.:0.2765121   #>  Max.   :0.9637045   Max.   :0.9437804   summary(rowSums(x)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>       1       1       1       1       1       1   ## --- observations ## expected abundance in each habitat class lam <- c(0.8, 0.6, 0.5, 0.4, 0.1)*1 ## sample x habitat level abundances yy <- t(sapply(seq_len(n), function(i) {     ## intercept and modifier combined     rpois(k, (x[i,]*lam))     })) ## total: sum over habitat classes ## this is what we observe y <- rowSums(yy) colSums(yy) #> [1] 174 107  87  73  18 table(y) #> y #>   0   1   2   3   4  #> 633 290  63  13   1   ## --- wrsi calculations (w <- wrsi(y, x)) #>         WRSI        zWRSI        rWRSI     Pused    Pavail        Pw        u #> V1 1.2738196  0.242019928  0.237402746 0.2639110 0.2071808 0.4674918 96.85533 #> V2 0.9308739 -0.071631412 -0.071509147 0.1891346 0.2031796 0.3416307 69.41241 #> V3 0.9878036 -0.012271338 -0.012270722 0.2016790 0.2041691 0.3625239 74.01620 #> V4 0.9989138 -0.001086792 -0.001086791 0.1861858 0.1863882 0.3666014 68.33018 #> V5 0.7991152 -0.224250206 -0.220565269 0.1590896 0.1990821 0.2932753 58.38587 #>           a #> V1 207.1808 #> V2 203.1796 #> V3 204.1691 #> V4 186.3882 #> V5 199.0821 op <- par(mfrow=c(1,2)) ## habitat level observations are unknown plot(lam, colSums(yy) / sum(yy), type=\"b\") ## this is approximated by the wrsi plot(lam, w$rWRSI, type=\"b\") abline(h=0, lty=2)  par(op)  ## --- sindex calculations for multiple species y2 <- cbind(Spp1=y, Spp2=rev(y), Spp3=sample(y)) (w2 <- sindex(y2, x)) #>            Spp1         Spp2        Spp3 #> V1  0.237402746 -0.008808089  0.02204551 #> V2 -0.071509147 -0.020322313 -0.03248812 #> V3 -0.012270722 -0.035190107 -0.04492797 #> V4 -0.001086791  0.036090377  0.02727927 #> V5 -0.220565269  0.030243498  0.02821293 heatmap(t(as.matrix(w2)), scale=\"none\")"},{"path":"/news/index.html","id":"version-03-6-june-27-2023","dir":"Changelog","previous_headings":"","what":"Version 0.3-6, June 27, 2023","title":"Version 0.3-6, June 27, 2023","text":"hoslem.test handles binning issues better data skewed produces meaningful warnings error G < 2 (#18).","code":""},{"path":"/news/index.html","id":"version-03-5-july-22-2019","dir":"Changelog","previous_headings":"","what":"Version 0.3-5, July 22, 2019","title":"Version 0.3-5, July 22, 2019","text":"CRAN release: 2019-07-22 Fixing URL encoding DOI (found new HTML tidy CRAN master).","code":""},{"path":"/news/index.html","id":"version-03-4-january-8-2019","dir":"Changelog","previous_headings":"","what":"Version 0.3-4, January 8, 2019","title":"Version 0.3-4, January 8, 2019","text":"CRAN release: 2019-01-08 Fixed family detection mep.","code":""},{"path":"/news/index.html","id":"version-03-3-january-7-2019","dir":"Changelog","previous_headings":"","what":"Version 0.3-3, January 7, 2019","title":"Version 0.3-3, January 7, 2019","text":"Fixed vcov method rsf.null subclass: now returns <0 x 0 matrix>. Fixed mep function properly handle lack family(object), result now failing rsf/rspf models. New functions: wrsi sindex weighted selection index.","code":""},{"path":"/news/index.html","id":"version-03-2-feb-28-2017","dir":"Changelog","previous_headings":"","what":"Version 0.3-2, Feb 28, 2017","title":"Version 0.3-2, Feb 28, 2017","text":"CRAN release: 2017-02-28 New function: rsf.null fitting ‘selection’ RSF model.","code":""},{"path":"/news/index.html","id":"version-03-1-feb-10-2017","dir":"Changelog","previous_headings":"","what":"Version 0.3-1, Feb 10, 2017","title":"Version 0.3-1, Feb 10, 2017","text":"CRAN release: 2017-02-11 New function: mep marginal effect plots.","code":""},{"path":"/news/index.html","id":"version-03-0-nov-4-2016","dir":"Changelog","previous_headings":"","what":"Version 0.3-0, Nov 4, 2016","title":"Version 0.3-0, Nov 4, 2016","text":"CRAN release: 2016-11-05 vcov.rsf log link dropped non-existent intercept, now fixed. ChangeLog now NEWS.md. residuals method added follows scaling used H-L test summaries. predict method failed due missing intercepts, now fixed. Continuous integration testing added development suite. Documentation revised.","code":""},{"path":"/news/index.html","id":"version-02-6-feb-15-2016","dir":"Changelog","previous_headings":"","what":"Version 0.2-6, Feb 15, 2016","title":"Version 0.2-6, Feb 15, 2016","text":"CRAN release: 2016-02-16 Fixed critical error messages rsf rspf functions alert user inclusion continuous covariates. Log link matched logit rspf call, now gives error. Imports pbapply (suggests).","code":""},{"path":"/news/index.html","id":"version-02-5-nov-6-2015","dir":"Changelog","previous_headings":"","what":"Version 0.2-5, Nov 6, 2015","title":"Version 0.2-5, Nov 6, 2015","text":"CRAN release: 2015-11-22 predict.rsf produced error Exponential RSF se.fit = TRUE. Coefficients augmented 0, thus non-conformable arguments error. Reported Martha Ellis. ChangeLog reformatted markdown file.","code":""},{"path":"/news/index.html","id":"version-02-4-may-19-2014","dir":"Changelog","previous_headings":"","what":"Version 0.2-4, May 19, 2014","title":"Version 0.2-4, May 19, 2014","text":"CRAN release: 2014-05-20 Cleaning ::: satisfy R 3.0.2 check. simulateUsedAvail keeps column name 1 variable supplied.","code":""},{"path":"/news/index.html","id":"version-02-3-june-18-2013","dir":"Changelog","previous_headings":"","what":"Version 0.2-3, June 18, 2013","title":"Version 0.2-3, June 18, 2013","text":"CRAN release: 2013-07-11 Summary threw error H-L test failed. Now warning. Reported Tyler Muhly (AITF). predict.rsf: response required newdata provided. Bug reported patch provided Clement Calenge (3/7/2013).","code":""},{"path":"/news/index.html","id":"version-02-2-mar-5-2013","dir":"Changelog","previous_headings":"","what":"Version 0.2-2, Mar 5, 2013","title":"Version 0.2-2, Mar 5, 2013","text":"CRAN release: 2013-04-06 predict.rsf: se.fit=TRUE produced error bootstrapped model. Bug reported Clement Calenge.","code":""},{"path":"/news/index.html","id":"version-02-1-oct-3-2012","dir":"Changelog","previous_headings":"","what":"Version 0.2-1, Oct 3, 2012","title":"Version 0.2-1, Oct 3, 2012","text":"rsf estimation: intercept now fixed 0, part optim result.","code":""},{"path":"/news/index.html","id":"version-02-0-oct-1-2012","dir":"Changelog","previous_headings":"","what":"Version 0.2-0, Oct 1, 2012","title":"Version 0.2-0, Oct 1, 2012","text":"CRAN release: 2012-10-02 Generic default method CAIC added. Bugfix: SE RSF case wrong (subsetting Hessian inverting) – now fixed. predict method RSF deal newdata due missing intercept – now fixed.","code":""},{"path":"/news/index.html","id":"version-01-5-sept-13-20-2012","dir":"Changelog","previous_headings":"","what":"Version 0.1-5, Sept 13 20, 2012","title":"Version 0.1-5, Sept 13 20, 2012","text":"CRAN release: 2012-09-14 new argument m rsf(), rspf() allowing local availability (matched use-available design). goats data set added Lele Keim 2006. Rd goats contains example analysis, . /inst/COPYING removed.","code":""},{"path":"/news/index.html","id":"version-01-4-oct-18-2011","dir":"Changelog","previous_headings":"","what":"Version 0.1-4, Oct 18, 2011","title":"Version 0.1-4, Oct 18, 2011","text":"CRAN release: 2011-10-19 R (>= 2.13.0) dependency added avoid R CMD check ERROR old R (reported Uwe Ligges).","code":""},{"path":"/news/index.html","id":"version-01-3-august-23-2011","dir":"Changelog","previous_headings":"","what":"Version 0.1-3, August 23, 2011","title":"Version 0.1-3, August 23, 2011","text":"CRAN release: 2011-09-28 .onLoad added zzz.R. predict method subsetted result newdata provided. Reported Rajapandian Kanagaraj (UFZ).","code":""},{"path":"/news/index.html","id":"version-01-2-july-9-2011","dir":"Changelog","previous_headings":"","what":"Version 0.1-2, July 9, 2011","title":"Version 0.1-2, July 9, 2011","text":"CRAN release: 2011-08-23 packageStartupMessage used zzz.R .onAttach.","code":""},{"path":"/news/index.html","id":"version-01-1-june-7-2011","dir":"Changelog","previous_headings":"","what":"Version 0.1-1, June 7, 2011","title":"Version 0.1-1, June 7, 2011","text":"CRAN release: 2011-07-23 kdepairs plots abs(cor), negative values can get large. hoslem.test: unique quantile values used cut().","code":""},{"path":"/news/index.html","id":"version-01-0-may-20-2011","dir":"Changelog","previous_headings":"","what":"Version 0.1-0, May 20, 2011","title":"Version 0.1-0, May 20, 2011","text":"CRAN release: 2011-06-04 Initial bunch functions released R-Forge CRAN.","code":""}]
